// BEGIN LIBRARY _____________________________________________________________


type ColumnType = string | number;

/**
 * Convert linux conventional date (1 = 1ms) to worksheet days date (1 = 1 day)
 */
function dateToDay(date?: Date): number {
  if (date == null) date = new Date();
  const excelEpoch = new Date(Date.UTC(1899, 11, 30)); // Excel's epoch (December 30, 1899)
  const msPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day

  // Calculate the number of days between the given date and the Excel epoch
  const daysSinceExcelEpoch = Math.floor((date.getTime() - excelEpoch.getTime()) / msPerDay);

  // Add the fractional part for the time of day
  const fractionalDay = (date.getHours() / 24) + (date.getMinutes() / 1440) + (date.getSeconds() / 86400);

  return daysSinceExcelEpoch + fractionalDay;
}

// Typed & Named Table
class Tnt {

  private rows: ColumnType[][] = [];
  private colNames: string[];
  private colFormat: string[];
  private keyColName: string;
  private keyIndex: number = -1;

  /**
   * @param columnNames names of columns
   * @param keyColName key column name, may by a uk or not
   */
  constructor(columnNames: string[], keyColName: string) {
    this.colNames = columnNames;
    this.keyColName = keyColName;
    this.colFormat = [];
    this.keyIndex = this.colNames.indexOf(keyColName);
  }

  addRow(newRow: ColumnType[]): void {
    this.rows.push(newRow);
  }

  addValue(keyValue: string, colName: string, value: ColumnType, errorColName: string): void {
    const row = this.findRowByKey(keyValue);
    if (row) {
      const colIndex = this.colNames.indexOf(colName);
      const errorColIndex = this.colNames.indexOf(errorColName);
      if (colIndex !== -1) {
        if (typeof row[colIndex] === 'number' && typeof value === 'number')
          (row[colIndex] as number) += (value as number);
        else {
          if (typeof row[colIndex] === 'string')
            (row[colIndex] as string) += value.toString;
          else {
            console.log(`Cannot add ${value} (a string) to column ${colName} which is a number.`);
          }
        }
      } else {
        console.log(`Column ${colName} does not exist, ${value} not set.`);
        if (typeof value === 'number')
          (row[errorColIndex] as number) += value;
      }
    } else {
      console.log(`Row with key ${keyValue} does not exist, ${value} not set.`);
    }
  }


  /**
   * 
   * @param filterColumnNames names of columns to filter (to keep)
   * @param filterFirstColumnValue value of first column to filter
   * @returns new Tnt with filtered rows and cols
   */
  filterRowsAndCols(filterColumnNames: string[], filterFirstColumnValue: string): Tnt {

    const filteredData =
      this.rows.filter(r => r[this.colNames.indexOf(filterColumnNames[0])] === filterFirstColumnValue)
        .map(row => filterColumnNames.map(colName => row[this.colNames.indexOf(colName)]));

    const newTnt = new Tnt(filterColumnNames, filterColumnNames[0]);
    newTnt.setWorkSheetData([filterColumnNames, ...filteredData]);
    return newTnt;

  }

  // Find a record by key
  findRowByKey(keyValue: ColumnType): ColumnType[] | null {
    return this.rows.find(row => row[this.keyIndex] === keyValue) || null;
  }


  forEachRowPair(callback: (record0: ColumnType[], record1: ColumnType[] | null) => void): void {
    for (let i = 0; i < this.rows.length; i++) {
      if (i + 1 < this.rows.length)
        callback(this.rows[i], this.rows[i + 1]);
      else
        callback(this.rows[i], null);
    }
  }


  getValues(row: ColumnType[], columns: string[]): ColumnType[] {
    const colIndexes = columns.map(col => this.colNames.indexOf(col));
    return colIndexes.map(index => row[index]);
  }

  getColumnValues(colName: string): ColumnType[] {
    const colIndex = this.colNames.indexOf(colName);
    if (colIndex === -1) {
      throw new Error(`Column ${colName} does not exist.`);
    }
    return this.rows.map(row => row[colIndex]);
  }

  getLowerRightCellAddress(): string {
    const worksheetData = this.getWorksheetData();
    const numRows = worksheetData.length;
    const numCols = worksheetData[0].length;

    const colLetter = this.getColumnLetter(numCols);
    return `${colLetter}${numRows}`;
  }

  getWorksheetData(): (string | number | boolean)[][] {
    let ret: (string | number | boolean)[][] = [];
    ret.push(this.colNames);
    ret.push(...this.rows.map(row =>
      row.map(cell => {
        if (cell === "_TRUE_") {
          return true;
        } else if (cell === "_FALSE_") {
          return false;
        } else {
          return cell;
        }
      })
    ));
    return ret;
  }


  private getColumnLetter(colNum: number): string {
    let letter = '';
    while (colNum > 0) {
      let remainder = (colNum - 1) % 26;
      letter = String.fromCharCode(65 + remainder) + letter;
      colNum = Math.floor((colNum - 1) / 26);
    }
    return letter;
  }

  getRowCount(): number {
    return this.rows.length
  }

  log(): void {
    console.log(this.colNames);
    console.log(this.rows);
  }

  orderRowsBy(columns: string[]): void {
    const colIndexes = columns.map(col => this.colNames.indexOf(col));

    this.rows.sort((a, b) => {
      for (let i = 0; i < colIndexes.length; i++) {
        const colIndex = colIndexes[i];
        if (a[colIndex] < b[colIndex]) {
          return -1;
        } else if (a[colIndex] > b[colIndex]) {
          return 1;
        }
      }
      return 0;
    });
  }

  setValue(keyValue: string, colName: string, value: ColumnType): void {
    const row = this.findRowByKey(keyValue);
    if (row) {
      const colIndex = this.colNames.indexOf(colName);
      if (colIndex !== -1) {
        row[colIndex] = value;
      } else {
        console.log(`Column ${colName} does not exist, ${value} not set.`);
      }
    } else {
      console.log(`Row with key ${keyValue} does not exist, ${value} not set.`);
    }
  }

  setValues(keyValue: string, columns: string[], values: ColumnType[]): void {
    const row = this.findRowByKey(keyValue);
    if (row) {
      columns.forEach((colName, index) => {
        const colIndex = this.colNames.indexOf(colName);
        if (colIndex !== -1) {
          row[colIndex] = values[index];
        } else {
          console.log(`Column ${colName} does not exist, ${values[index]} not set.`);
        }
      });
    } else {
      console.log(`Row with key ${keyValue} does not exist, values not set.`);
    }
  }

  setWorkSheetData(worksheetData: (string | number | boolean)[][]): void {
    this.colNames = worksheetData[0].map((colName) => colName.toString());
    this.keyIndex = this.colNames.indexOf(this.keyColName);

    let dataTmp: ColumnType[][] = worksheetData.slice(1).map(row =>
      row.map(cell => {
        if (typeof cell === 'boolean') {
          return cell ? "_TRUE_" : "_FALSE_";
        } else {
          return cell as ColumnType;
        }
      })
    );

    this.rows = dataTmp;
  }


  upsertRowsWithColumns(src: Tnt, columnsToUpdate: string[], upsertAddDateColumn: string, upsertMissingDateColumn: string): void {
    const colIndexes = columnsToUpdate.map(col => this.colNames.indexOf(col));
    const addDateIndex = this.colNames.indexOf(upsertAddDateColumn);
    const missingDateIndex = this.colNames.indexOf(upsertMissingDateColumn);
    const now = dateToDay();

    // Track existing keys to identify missing records
    const existingKeys = new Set(this.rows.map(record => record[this.keyIndex]));

    src.rows.forEach(record => {
      const key = record[src.keyIndex];
      const existingRecord = this.findRowByKey(key);
      if (existingRecord) {
        colIndexes.forEach((colIndex, i) => {
          existingRecord[colIndex] = record[src.colNames.indexOf(columnsToUpdate[i])];
        });

        existingKeys.delete(key);
      } else {
        const newRecord: ColumnType[] = new Array(this.colNames.length).fill(null) as ColumnType[];
        newRecord[this.keyIndex] = key;
        colIndexes.forEach((colIndex, i) => {
          newRecord[colIndex] = record[src.colNames.indexOf(columnsToUpdate[i])];
        });
        if (addDateIndex !== -1) {
          newRecord[addDateIndex] = now;
        }
        this.addRow(newRecord);
      }
    });

    // Update missing date columns for records that were not found in src
    existingKeys.forEach(key => {
      const existingRecord = this.findRowByKey(key);
      if (existingRecord && missingDateIndex !== -1) {
        existingRecord[missingDateIndex] = now;
      }
    });
  }




}


// END LIBRARY _______________________________________________________________


// Short date hour format
const SDH_FORMAT = "ddd dd/mm hh:mm";



interface TableSheet {
  sheet: ExcelScript.Worksheet;
  keyColName: string;  // Name of column containing unique key
  colNames: string[];  // List of columns names
  keyValues: string[]; // List of unique key value used as index
};

function construct(_sheet: ExcelScript.Worksheet, _key: string): TableSheet {

  let lastColumn = _sheet.getUsedRange()?.getColumnCount() || 0;

  if (lastColumn === 0) {
    throw Error("The sheet is empty or contains no data.");
  }

  // Get the range for the first row dynamically
  let firstRowRange = _sheet.getRangeByIndexes(0, 0, 1, lastColumn); // Row 0, all columns
  let cols = firstRowRange.getValues()[0].map((cell) => cell?.toString() || "");

  if (cols.indexOf(_key) < 0) {
    throw Error(`The sheet does not contain the key "${_key}".`);
  }

  console.log("construct : " + cols);
  console.log("construct : " + cols.indexOf(_key) + "/" + _sheet.getUsedRange(true).getRowCount());

  let nbRow = _sheet.getUsedRange(true).getRowCount();

  // We cannot have a range empty (0 row); to avoid bug I force nbRow to 2
  // I don't know why but it's working
  if (nbRow == 1) nbRow = 2;

  let rk = _sheet.getRangeByIndexes(1, cols.indexOf(_key), nbRow - 1, 1);

  let v = rk.getColumn(0).getValues();
  let kv = v.map((cell) => cell?.toString() || "");
  return { sheet: _sheet, keyColName: _key, colNames: cols, keyValues: kv };
}



function logTableSheet(ts: TableSheet) {
  console.log(ts.sheet.getName());
  console.log(ts.colNames);
  console.log(`UK = ${ts.keyColName}`);
  console.log(ts.keyValues);
}



/**
 * Return index of a column as letters ("A" in "A1 notation")
 */
function getColumnIdx(ts: TableSheet, colName: string = null): string {
  if (colName == null) { colName = ts.keyColName };
  let index = ts.colNames.indexOf(colName);
  let columnName = "";
  while (index >= 0) {
    columnName = String.fromCharCode((index % 26) + 65) + columnName;
    index = Math.floor(index / 26) - 1;
  }
  return columnName;
}

function getColumnValues(ts: TableSheet, colName: string = ""): string[] {
  if (colName == "") {
    colName = ts.keyColName;
  }

  let colIdx = getColumnIdx(ts, colName);

  let r = ts.sheet.getRangeByIndexes(1, 0, ts.sheet.getUsedRange().getRowCount() - 1, ts.colNames.length);
  let values = r.getColumn(ts.colNames.indexOf(colName)).getValues();
  let ret = values.map((cell) => cell?.toString() || "");
  return ret;
}

function findRowIdxByKey(ts: TableSheet, key: string): number {
  // A1 : start at 1 + offset for header ==> +2
  return ts.keyValues.indexOf(key) + 2;
}

function setValue(ts: TableSheet, k: string, variable: string, value: number) {
  let rowIndex = findRowIdxByKey(ts, k);
  let colIndex = getColumnIdx(ts, variable);
  ts.sheet.getRange(`${colIndex}${rowIndex}`).setValue(value);
}

function setColumnValues(ts: TableSheet, column: string, variables: (string | number | boolean)[], startRow: number, format: string) {
  let colIdx = getColumnIdx(ts, column);
  const variables2D = variables.map(variables => [variables]);

  // let r: ExcelScript.Range =
  //   ts.sheet.getRange(`${colIdx}${startRow}:${colIdx}${startRow + variables.length - 1}`);

  // r.setValues(variables2D);


  variables.forEach((v) => {
    let cell = ts.sheet.getRange(`${colIdx}${startRow}:${colIdx}${startRow}`);
    cell.setValue(v);

    if (format == "url") {

      const hyperlink: ExcelScript.RangeHyperlink = {
        address: `https://apec.atlassian.net/browse/${v}`,  // The URL
        textToDisplay: v?.toString()              // The text to display
      };
      cell.setHyperlink(hyperlink);
    }

    if (format == "date") {
      cell.setNumberFormat(SDH_FORMAT);
    }

    startRow++;

  })


}

function getRowValues(ts: TableSheet, key: string, colNames: string[]): (string | number | boolean)[] {
  let ret: (string | number | boolean)[] = [];

  let rowIdx = findRowIdxByKey(ts, key);

  let v = ts.sheet.getRangeByIndexes(rowIdx - 1, 0, 1, ts.colNames.length).getValues()[0];
  let cn = "Story point estimate";

  colNames.forEach((k) => ret.push(v[ts.colNames.indexOf(k)]));
  //     console.log("grv: " + k + " : " + ts.colNames.indexOf(k) + " = " + v[ts.colNames.indexOf(k)]);
  return ret;
}

/**
 * For row with "key" => {colNames[n] = colValues[n]}
 */
function setRowValues(ts: TableSheet, key: string, colNames: string[], colValues: (string | number | boolean)[]) {

  let rowIdx = findRowIdxByKey(ts, key);

  // console.log("srv: " + ts.sheet.getName());
  // console.log("srv: " + key + " at " + rowIdx);
  // console.log("srv: " + colNames + " < " + colValues);

  // Get whole line
  let v = ts.sheet.getRangeByIndexes(rowIdx - 1, 0, 1, ts.colNames.length).getValues();

  // Update cell in line
  colNames.map((k) => v[0][ts.colNames.indexOf(k)] = colValues.shift());

  // Set whole line
  ts.sheet.getRangeByIndexes(rowIdx - 1, 0, 1, ts.colNames.length).setValues(v);

}

function dateToExcelDate(date: Date = null): number {
  if (date == null) date = new Date();
  const excelEpoch = new Date(Date.UTC(1899, 11, 30)); // Excel's epoch (December 30, 1899)
  const msPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day

  // Calculate the number of days between the given date and the Excel epoch
  const daysSinceExcelEpoch = Math.floor((date.getTime() - excelEpoch.getTime()) / msPerDay);

  // Add the fractional part for the time of day
  const fractionalDay = (date.getHours() / 24) + (date.getMinutes() / 1440) + (date.getSeconds() / 86400);

  return daysSinceExcelEpoch + fractionalDay;
}


// Excel functions
function timetrack(ticketsTable: TableSheet, scopeTable: TableSheet, trackedKey: string) {

}

// New implementation __________________________________________________________________

/**
 * Compute the number of days between two dates, 1 = 1 day
 * @param workerProfile name of worker
 * @param status status of the task
 * @param from beginning in days
 * @param to  begining in days
 * @returns time in days
 */
function computeDaysStatusDuration(workerProfile: string, status: string, from: number, to: number | null): number {
  if (to === null) {
    to = dateToDay();
  }
  return (to - from);
}


function computeStatusDurationFromJiraStatusTransitionsHistory(sc: Tnt, trans: Tnt) {

  // Name of Column Name (CN) for state transition
  const stDateCN = "Status Transition.date";
  const stFromCN = "Status Transition.from";
  const stToCN = "Status Transition.to";
  const stIdCN = "Status Transition.id";

  const stCNs = ["Clé", "État", stFromCN, stToCN, "Type de ticket", stDateCN, stIdCN];

  const stDateIdx = stCNs.indexOf(stDateCN);
  const stToIdx = stCNs.indexOf(stToCN);

  const ssCNs = ["Ouvert",	"En attente", "En analyse", "En analyse technique",	"En Rédaction",	
                 "Co-Conception" , "A Réaliser", "Non validée","A traiter","Réalisation", 
                 "En cours","Revue Réalisation","Traitée","A valider", "En cours de validation",
                 "Validée","Fermée","Annulée","Error"];


  sc.getColumnValues("Clé").forEach((k) => {
    sc.setValues(k.toString(), ssCNs, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0]);
    let scopeTrans: Tnt = trans.filterRowsAndCols(stCNs, k.toString());
    if (scopeTrans.getRowCount() > 0) {
      scopeTrans.orderRowsBy([stDateCN, stIdCN]);
      scopeTrans.forEachRowPair((r0, r1) => {
        let duration = computeDaysStatusDuration("workerProfile",
          r0[stToIdx].toString(),
          r0[stDateIdx] as number,
          (r1 == null) ? null : (r1[stDateIdx] as number));
        sc.addValue(k.toString(), r0[stToIdx].toString(), duration,"Error");
        //console.log(`compute time for ${k} for status "${r0[stToIdx]}" from ${r0[stDateIdx]} to ${r1 == null ? "null" : r1[stDateIdx]} = ${Math.floor(duration*24*60)} minutes`);
      });
    }
  });

}


function main(workbook: ExcelScript.Workbook) {
  const tickets = workbook.getWorksheet("Tickets");
  const scope = workbook.getWorksheet("Scope2");

  const rTickets = tickets.getUsedRange().getValues()
  const rScope = scope.getUsedRange().getValues();

  let s = new Tnt(rScope[0] as string[], "Clé");
  let t = new Tnt(rTickets[0] as string[], "Clé");


  t.setWorkSheetData(rTickets);
  s.setWorkSheetData(rScope);
  //s.log();


  // upsert scope while updating other data 
  s.upsertRowsWithColumns(t,
    ["Clé", "Personne assignée", "Type de ticket", "Story point estimate", "État"],
    "Detected", "Missing");


  // compute time sheet from status transition history
  computeStatusDurationFromJiraStatusTransitionsHistory(s, t);  

  s.log();

  let rResult = s.getWorksheetData();

  console.log(`A1:${s.getLowerRightCellAddress()}`);

  scope.getRange(`A1:${s.getLowerRightCellAddress()}`).setValues(rResult);

  console.log("Mise à jour terminée.");
}
